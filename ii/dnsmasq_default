# This file has five functions: 
# 1) to completely disable starting dnsmasq, 
# 2) to set DOMAIN_SUFFIX by running `dnsdomainname` 
# 3) to select an alternative config file
#    by setting DNSMASQ_OPTS to --conf-file=<file>
# 4) to tell dnsmasq to read the files in /etc/dnsmasq.d for
#    more configuration variables.
# 5) to stop the resolvconf package from controlling dnsmasq's
#    idea of which upstream nameservers to use.
# For upgraders from very old versions, all the shell variables set 
# here in previous versions are still honored by the init script
# so if you just keep your old version of this file nothing will break.

#DOMAIN_SUFFIX=`dnsdomainname`
#DNSMASQ_OPTS="--conf-file=/etc/dnsmasq.alt"

# Whether or not to run the dnsmasq daemon; set to 0 to disable.
#ENABLED=1

# By default search this drop directory for configuration options.
# Libvirt leaves a file here to make the system dnsmasq play nice.
# Comment out this line if you don't want this. The dpkg-* are file
# endings which cause dnsmasq to skip that file. This avoids pulling
# in backups made by dpkg.
#CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new
# If the resolvconf package is installed, dnsmasq will use its output 
# rather than the contents of /etc/resolv.conf to find upstream 
# nameservers. Uncommenting this line inhibits this behaviour.
# Not that including a "resolv-file=<filename>" line in 
# /etc/dnsmasq.conf is not enough to override resolvconf if it is
# installed: the line below must be uncommented.
#IGNORE_RESOLVCONF=yes

#DNSMASQ_OPTS="--conf-file=/etc/dnsmasq.alt"
ENABLED=1
CONFIG_DIR=/etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new
IP=$(ifconfig eth0 | perl -nle 's/dr:(\S+)/print $1/e')
MASK=$(ifconfig eth0 | perl -nle 's/Mask:(\S+)/print $1/e')
cat <<EOF>/etc/dnsmasq.d/proxy.conf
# DO NOT EDIT, this file is dynamically created from /etc/default/dnsmasq
interface=eth0
dhcp-range=${IP},proxy,${MASK}
port=0 #no dns
log-dhcp #for debugging
#bind-dynamic # we don't want to run on all interfaces
# get a file loaded via pxe
dhcp-boot=tag:ipxe,hanlon.ipxe,${IP},${IP}
dhcp-boot=tag:!ipxe,undionly.kpxe,${IP},${IP}
dhcp-boot=undionly.kpxe,${IP},${IP}
dhcp-userclass=set:ipxe,iPXE
# Old school pxe service tftp server/file to load
pxe-prompt="Press F8 for boot menu", 3
pxe-service=X86PC, "Boot from network", pxelinux, ${IP}
pxe-service=X86PC, "Boot from local hard disk", 0, ${IP}
#dhcp-option-force=224,${IP} # hanlon server
#dhcp-option-force=225,8026 # hanlon port
#dhcp-option-force=226,http://${IP}:8026/ # hanlon url
enable-tftp
tftp-root=/tftp
EOF

mkdir -p /tftp/pxelinux.cfg

cat <<EOF>/tftp/pxelinux.cfg/default
default coreos
prompt 1
timeout 15

display boot.msg

label coreos
  menu default
  kernel coreos_production_pxe.vmlinuz
  append initrd=coreos_production_pxe_image.cpio.gz cloud-config-url=http://${IP}:8080/pxe-cloud-config.yml
EOF
